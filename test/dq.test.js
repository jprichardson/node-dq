// Generated by CoffeeScript 1.4.0
(function() {
  var TESTQ_NAME, dq, puts, testutil;

  dq = require('../lib/dq.js');

  testutil = require('testutil');

  puts = console.log;

  TESTQ_NAME = 'testq';

  describe('dq', function() {
    var Q;
    Q = null;
    beforeEach(function(done) {
      return dq["delete"]({
        name: TESTQ_NAME
      }, function(err) {
        return dq.create({
          name: TESTQ_NAME
        }, function(err, q) {
          Q = q;
          return done();
        });
      });
    });
    describe('+ create()', function() {
      it('should create a Queue with default params', function(done) {
        return dq.create({
          name: 'someQ'
        }, function(err, q) {
          T(q.name === 'someQ');
          T(q.host === '127.0.0.1');
          T(q.port === 6379);
          T(q.key === 'dq:someQ');
          return done();
        });
      });
      it('should create a Queue with input params', function(done) {
        return dq.create({
          name: 'someQ',
          host: '44.22.11.33',
          port: 6000
        }, function(err, q) {
          T(q.name === 'someQ');
          T(q.host === '44.22.11.33');
          T(q.port === 6000);
          return done();
        });
      });
      return it('should return an error if name doesnt exist', function(done) {
        return dq.create({}, function(err, q) {
          T(err !== null);
          return done();
        });
      });
    });
    describe('- enq()', function() {
      it('should enqueue a value with a priority', function(done) {
        return Q.enq('string1', function(err, res) {
          T(err === null);
          return Q.count(function(err, res) {
            T(err === null);
            T(res === 1);
            return done();
          });
        });
      });
      it('should enqueue with only the value parameter', function(done) {
        Q.enq('someval');
        Q.enq('anotherval');
        return setTimeout(function() {
          return Q.count(function(err, res) {
            T(res === 2);
            return done();
          });
        }, 150);
      });
      return it('should enqueue with only the value and priority parameters', function(done) {
        Q.enq('z', 20);
        Q.enq('a', 1);
        return setTimeout(function() {
          return Q.count(function(err, res) {
            T(res === 2);
            return done();
          });
        }, 150);
      });
    });
    describe('- count()', function() {
      return it('should count the items in the queue', function(done) {
        return Q.enq('a', function(err, res) {
          return Q.enq('b', function(err, res) {
            return Q.enq('c', function(err, res) {
              return Q.count(function(err, res) {
                T(res === 3);
                return done();
              });
            });
          });
        });
      });
    });
    describe('- deq()', function() {
      it('should dequeue in proper order', function(done) {
        return Q.enq('a', function(err, res) {
          return Q.enq('b', function(err, res) {
            return Q.enq('c', function(err, res) {
              return Q.deq(function(err, res) {
                T(res === 'a');
                return Q.deq(function(err, res) {
                  T(res === 'b');
                  return Q.deq(function(err, res) {
                    T(res === 'c');
                    return Q.deq(function(err, res) {
                      T(err === null);
                      T(res === void 0);
                      return done();
                    });
                  });
                });
              });
            });
          });
        });
      });
      return it('should dequeue in proper order', function(done) {
        return Q.enq('a', 0, function(err, res) {
          return Q.enq('b', -1, function(err, res) {
            return Q.enq('c', 1, function(err, res) {
              return Q.deq(function(err, res) {
                T(res === 'b');
                return Q.deq(function(err, res) {
                  T(res === 'a');
                  return Q.deq(function(err, res) {
                    T(res === 'c');
                    return Q.deq(function(err, res) {
                      T(err === null);
                      T(res === void 0);
                      return done();
                    });
                  });
                });
              });
            });
          });
        });
      });
    });
    return describe('- quit()', function() {
      return it('should set the hasQuit flag', function(done) {
        return dq.create({
          name: 'blah'
        }, function(err, q) {
          F(q.hasQuit);
          return q.quit(function() {
            T(q.hasQuit);
            return done();
          });
        });
      });
    });
  });

}).call(this);
